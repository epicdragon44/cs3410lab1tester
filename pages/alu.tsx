import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React from "react";
import RandomUtils from "../libs/random";
import { CopyToClipboard } from "react-copy-to-clipboard";

const ALU: NextPage = () => {
    // constants
    const num_of_lines = 25;
    const first_line =
        "Op[4] A[32] B[32] Sa[5] C[32] V" +
        "\n# Notes: Please see the provided ALU Design Report, Page 3, for detailed insight into how testing works." +
        "\n#        " +
        "\n#        The first line above is the header, indicating pins and their bit widths." +
        "\n#        " +
        "\n#        The 325 lines that follow are test cases generated by my custom test case generator: https://cs3410lab1tester.vercel.app" +
        "\n#        In case you're wondering, the generated cases are robust, and will take advantage of TypeScript features to ensure every feature (such as negative or positive inputs) required was tested at at least one point." +
        "\n#        " +
        "\n#        The last few lines at the end are carefully-generated edge cases that conform to specific use cases." +
        "\n#        In this case, it tests logical and arithmetic right shifts.";

    let randConst1 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    let randConst2 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    let randConst3 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    let randConst4 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    const edge_cases = [
        `1100 0 ${randConst1} 31 0 0`,
        "1101 0 -649986865 31 4294967295 0",
        `1100 0 ${randConst3} 0 ${randConst3} 0`,
        `1101 0 ${randConst4} 0 ${randConst4} 0`,
    ];

    // hook to display the generated test file
    const [testCases, setTestCases] = React.useState("");

    const generateAndTest = (): string => {
        // Define test input variables, including the OpCode
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "0101";
        let V = 0;

        // Run the operation
        let C = A & B;

        // Return the generated line
        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateOrTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "0100";
        let V = 0;
        let C = A | B;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateXorTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "0010";
        let V = 0;
        let C = A ^ B;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateNorTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "0011";
        let V = 0;
        let C = ~(A | B);

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const convertNegativeNumToTwosComplementRepresentation = (
        num: number
    ): string => {
        let binary = num.toString(2);
        let twosComplement = "";
        let carry = 1;
        for (let i = binary.length - 1; i >= 0; i--) {
            if (binary[i] === "1") {
                if (carry === 1) {
                    twosComplement = "0" + twosComplement;
                } else {
                    twosComplement = "1" + twosComplement;
                }
            } else {
                if (carry === 1) {
                    twosComplement = "1" + twosComplement;
                    carry = 0;
                } else {
                    twosComplement = "0" + twosComplement;
                }
            }
        }
        return twosComplement;
    };

    const generateLogicalShiftLeftTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = Math.random() > 0.5 ? "1001" : "1000";
        let V = 0;
        let C = B << Sa;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateLogicalShiftRightTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "1100";
        let V = 0;
        let C = B >>> Sa;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateArithmeticShiftRightTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "1101";
        let V = 0;
        let C = B >> Sa;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateNotEqualTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Astr = A.toString(2).padStart(32, "0");
        let Bstr = B.toString(2).padStart(32, "0");

        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "0000";

        let V = 0;

        let C = Astr !== Bstr ? 1 : 0;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateEqualTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Astr = A.toString(2).padStart(32, "0");
        let Bstr = B.toString(2).padStart(32, "0");

        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "0001";

        let V = 0;

        let C = Astr === Bstr ? 1 : 0;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateLessThanTest = (): string => {
        // less than or equal to zero
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "1110";
        let V = 0;
        let C = A <= 0 ? 1 : 0;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateGreaterThanTest = (): string => {
        // greater than or equal to zero
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = "1111";
        let V = 0;
        let C = A > 0 ? 1 : 0;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateAddTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = Math.random() > 0.5 ? "0110" : "0111";
        let C = A + B;

        // V stores the overflow bit
        let V = Math.abs(C) > 2147483647 ? 1 : 0;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    const generateSubTest = (): string => {
        let A = RandomUtils.randomInt(-2147483648, 2147483647);
        let B = RandomUtils.randomInt(-2147483648, 2147483647);
        let Sa = RandomUtils.randomInt(0, 31);
        let Op = Math.random() > 0.5 ? "1010" : "1011";
        let C = A - B;

        // V stores the overflow bit
        let V = Math.abs(C) > 2147483647 ? 1 : 0;

        let line = Op + " " + A + " " + B + " " + Sa + " " + C + " " + V;
        return line;
    };

    // generates a new test file with a lot of test cases
    const generate = (): void => {
        let newText = first_line;

        for (let i = 0; i < num_of_lines; i++) {
            // Generate new test cases
            newText += "\n" + generateAndTest();
            newText += "\n" + generateOrTest();
            newText += "\n" + generateXorTest();
            newText += "\n" + generateNorTest();

            newText += "\n" + generateLogicalShiftLeftTest();
            newText += "\n" + generateLogicalShiftRightTest();
            newText += "\n" + generateArithmeticShiftRightTest();

            newText += "\n" + generateNotEqualTest();
            newText += "\n" + generateEqualTest();

            newText += "\n" + generateLessThanTest();
            newText += "\n" + generateGreaterThanTest();

            newText += "\n" + generateAddTest();
            newText += "\n" + generateSubTest();
        }

        // add the edge cases
        for (let i = 0; i < edge_cases.length; i++) {
            newText += "\n" + edge_cases[i];
        }

        // set the text
        setTestCases(newText);
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>ALU Test Case Generator</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <main className={styles.notmain}>
                <h1 className={styles.title}>
                    <a onClick={generate} className='hover:cursor-pointer'>
                        Generate Test Case{" "}
                    </a>{" "}
                    for ALU
                </h1>
                <br />
                <br />
                <CopyToClipboard text={testCases}>
                    <button className='bg-blue-600 text-white text-sm leading-6 font-medium py-2 px-5 rounded-lg'>
                        Copy to Clipboard
                    </button>
                </CopyToClipboard>
                <br />
                <br />
                <hr />
                <br />
                <code className={styles.code}>{testCases}</code>
            </main>
        </div>
    );
};

export default ALU;
