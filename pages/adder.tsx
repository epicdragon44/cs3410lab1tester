import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React from "react";
import RandomUtils from "../libs/random";

const Adder: NextPage = () => {
    // constants
    const num_of_lines = 100;
    const first_line =
        "A[32] B[32] Cin C[32] V \n 0 0 0 0 0 \n 0 0 1 1 0 \n 0 1 0 1 0 \n -1 1 0 0 0 \n 1 0 0 1 0 \n -1 0 1 0 0 \n 1 1 0 2 0 \n 0 -1 0 -1 0";
    const format_as_binary = false;

    // hook to display the generated test file
    const [testCases, setTestCases] = React.useState("");

    // All test files generated should have at least all these features present
    type SingularTestCase = {
        line: string;
        features: {
            containsNegative: boolean;
            containsPositive: boolean;
            containsOverflow: boolean;
            containsCarryin: boolean;
        };
    };

    // generates a new singlar test case
    const newLine = (asBinary: boolean): SingularTestCase => {
        let line = "";
        let a = RandomUtils.randomInt(-2147483648, 2147483647);
        let b = RandomUtils.randomInt(-2147483648, 2147483647);
        let cin = RandomUtils.randomInt(0, 1);

        let c = a + b + cin;
        let v = c > 2 ** 31 - 1 || c < (-2) ** 31 ? 1 : 0;

        if (asBinary) {
            line += a.toString(2).padStart(32, "0") + " ";
            line += b.toString(2).padStart(32, "0") + " ";
            line += cin.toString(2) + " ";
            line += c.toString(2).padStart(32, "0") + " ";
            line += v.toString(2) + " ";
        } else {
            line += a + " ";
            line += b + " ";
            line += cin + " ";
            line += c + " ";
            line += v + " ";
        }

        return {
            line: line,
            features: {
                containsNegative: a < 0 || b < 0,
                containsPositive: a > 0 || b > 0,
                containsOverflow: v === 1,
                containsCarryin: cin === 1,
            },
        };
    };

    // generates a new test file with a lot of test cases
    const generate = (): void => {
        let featureCheck = {
            containsNegative: false,
            containsPositive: false,
            containsOverflow: false,
            containsCarryin: false,
        };

        let newText = first_line;
        for (let i = 0; i < num_of_lines; i++) {
            // Generate a new test case
            let o = newLine(format_as_binary);

            // Check if the new line contains any of the features
            for (let key in featureCheck) {
                if (o.features[key as keyof typeof o.features]) {
                    featureCheck[key as keyof typeof featureCheck] = true;
                }
            }

            // Append the new line to the text
            newText += "\n" + o.line;
        }

        // if the feature check features aren't all true, generate again
        for (let key in featureCheck) {
            if (!featureCheck[key as keyof typeof featureCheck]) {
                generate();
                return;
            }
        }

        // if the feature check passes, set the text
        setTestCases(newText);
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>Add32 Test Case Generator</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    <a href='#' onClick={generate}>
                        Generate Test Case{" "}
                    </a>{" "}
                    for Adder32
                </h1>

                <code className={styles.code}>{testCases}</code>
            </main>
        </div>
    );
};

export default Adder;
