import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React from "react";
import RandomUtils from "../libs/random";
import { CopyToClipboard } from "react-copy-to-clipboard";

const LeftShifter: NextPage = () => {
    // constants
    const num_of_lines = 100;
    const first_line = "Sa[5] B[32] Cin C[32]";
    const format_as_binary = true;

    // hook to display the generated test file
    const [testCases, setTestCases] = React.useState("");

    // generates a new singlar test case
    const newLine = (asBinary: boolean): string => {
        let line = "";

        let Sa = RandomUtils.randomInt(0, 31);
        let B = RandomUtils.randomInt(0, 2 ** 32 - 1);
        let Cin = RandomUtils.randomInt(0, 1);

        // perform a logical left shift on B by Sa
        // replacing the rightmost bits with Cin
        let BinBinary = B.toString(2).padStart(32, "0");
        for (let i = 0; i < Sa; i++) {
            BinBinary = BinBinary.slice(1) + Cin.toString();
        }

        // convert the binary string back to a number, C
        let C = parseInt(BinBinary, 2);

        // write to line w/ formatting
        if (asBinary) {
            line += Sa.toString(2).padStart(5, "0") + " ";
            line += B.toString(2).padStart(32, "0") + " ";
            line += Cin.toString(2) + " ";
            line += C.toString(2).padStart(32, "0") + " ";
        } else {
            line += Sa + " ";
            line += B + " ";
            line += Cin + " ";
            line += C + " ";
        }

        return line;
    };

    // generates a new test file with a lot of test cases
    const generate = (): void => {
        let newText = first_line;

        for (let i = 0; i < num_of_lines; i++) {
            // Generate a new test case
            let o = newLine(format_as_binary);

            // Append the new line to the text
            newText += "\n" + o;
        }

        // set the text
        setTestCases(newText);
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>LeftShift32 Test Case Generator</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <main className={styles.notmain}>
                <h1 className={styles.title}>
                    <a onClick={generate} className='hover:cursor-pointer'>
                        Generate Test Case{" "}
                    </a>{" "}
                    for LeftShift32
                </h1>
                <br />
                <br />
                <CopyToClipboard text={testCases}>
                    <button className='bg-blue-600 text-white text-sm leading-6 font-medium py-2 px-5 rounded-lg'>
                        Copy to Clipboard
                    </button>
                </CopyToClipboard>
                <br />
                <br />
                <hr />
                <br />
                <code className={styles.code}>{testCases}</code>
            </main>
        </div>
    );
};

export default LeftShifter;
