import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React from "react";
import RandomUtils from "../libs/random";
import { CopyToClipboard } from "react-copy-to-clipboard";

const LeftShifter: NextPage = () => {
    // constants
    const num_of_lines = 325;
    const first_line =
        "Sa[5] B[32] Cin C[32]" +
        "\n# Notes: Please see the provided ALU Design Report, Page 3, for detailed insight into how testing works." +
        "\n#        " +
        "\n#        The first line above is the header, indicating pins and their bit widths." +
        "\n#        " +
        "\n#        The 325 lines that follow are test cases generated by my custom test case generator: https://cs3410lab1tester.vercel.app" +
        "\n#        In case you're wondering, the generated cases are robust, and will take advantage of TypeScript features to ensure every feature (such as negative or positive inputs) required was tested at at least one point." +
        "\n#        " +
        "\n#        The last few lines at the end are carefully-generated edge cases that conform to specific use cases." +
        "\n#        In this case, it tests shifting by the maximum and minimum amounts.";

    const format_as_binary = true;

    let randConst1 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    let randConst2 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    let randConst3 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    let randConst4 = RandomUtils.randomInt(0, 2 ** 32 - 1);
    const edge_cases = [
        `00000 ${randConst1} 0 ${randConst1}`,
        `00000 ${randConst2} 1 ${randConst2}`,
        `11111 ${randConst3} 0 00000000000000000000000000000000`,
    ];

    // hook to display the generated test file
    const [testCases, setTestCases] = React.useState("");

    // generates a new singlar test case
    const newLine = (asBinary: boolean): string => {
        let line = "";

        let Sa = RandomUtils.randomInt(0, 31);
        let B = RandomUtils.randomInt(0, 2 ** 32 - 1);
        let Cin = RandomUtils.randomInt(0, 1);

        // perform a logical left shift on B by Sa
        // replacing the rightmost bits with Cin
        let BinBinary = B.toString(2).padStart(32, "0");
        for (let i = 0; i < Sa; i++) {
            BinBinary = BinBinary.slice(1) + Cin.toString();
        }

        // convert the binary string back to a number, C
        let C = parseInt(BinBinary, 2);

        // write to line w/ formatting
        if (asBinary) {
            line += Sa.toString(2).padStart(5, "0") + " ";
            line += B.toString(2).padStart(32, "0") + " ";
            line += Cin.toString(2) + " ";
            line += C.toString(2).padStart(32, "0") + " ";
        } else {
            line += Sa + " ";
            line += B + " ";
            line += Cin + " ";
            line += C + " ";
        }

        return line;
    };

    // generates a new test file with a lot of test cases
    const generate = (): void => {
        let newText = first_line;

        for (let i = 0; i < num_of_lines; i++) {
            // Generate a new test case
            let o = newLine(format_as_binary);

            // Append the new line to the text
            newText += "\n" + o;
        }

        // add the edge cases
        for (let i = 0; i < edge_cases.length; i++) {
            newText += "\n" + edge_cases[i];
        }

        // set the text
        setTestCases(newText);
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>LeftShift32 Test Case Generator</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <main className={styles.notmain}>
                <h1 className={styles.title}>
                    <a onClick={generate} className='hover:cursor-pointer'>
                        Generate Test Case{" "}
                    </a>{" "}
                    for LeftShift32
                </h1>
                <br />
                <br />
                <CopyToClipboard text={testCases}>
                    <button className='bg-blue-600 text-white text-sm leading-6 font-medium py-2 px-5 rounded-lg'>
                        Copy to Clipboard
                    </button>
                </CopyToClipboard>
                <br />
                <br />
                <hr />
                <br />
                <code className={styles.code}>{testCases}</code>
            </main>
        </div>
    );
};

export default LeftShifter;
